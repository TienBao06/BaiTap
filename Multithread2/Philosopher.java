package Multithread2;

import java.util.concurrent.Semaphore;

public class Philosopher extends Thread {
    private int id;
    private Semaphore leftChopstick, rightChopstick;

    public Philosopher(int id, Semaphore leftChopstick, Semaphore rightChopstick) {
        this.id = id;
        this.leftChopstick = leftChopstick;
        this.rightChopstick = rightChopstick;
    }

    private void think() throws InterruptedException {
        System.out.println("Tri·∫øt gia " + id + " ƒëang suy nghƒ©...");
        Thread.sleep(1000);
    }

    private void eat() throws InterruptedException {
        System.out.println("Tri·∫øt gia " + id + " ƒëang ƒÉn üçú...");
        Thread.sleep(1000);
    }

    @Override
    public void run() {
        try {
            while (true) {
                think();
                // ƒê·ªÉ tr√°nh deadlock, tri·∫øt gia ch·∫µn l·∫•y ƒë≈©a tr√°i tr∆∞·ªõc, tri·∫øt gia l·∫ª l·∫•y ƒë≈©a ph·∫£i tr∆∞·ªõc
                if (id % 2 == 0) {
                    leftChopstick.acquire();
                    rightChopstick.acquire();
                } else {
                    rightChopstick.acquire();
                    leftChopstick.acquire();
                }

                eat();

                leftChopstick.release();
                rightChopstick.release();
            }
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
        }
    }
}